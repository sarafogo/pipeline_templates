name: CI .NET Framework

on:
  workflow_call:
    # inputs:
    #   enableSonar:
    #     type: string
    #     required: false
    #     default: 'true'
    #     description: 'Enable SonarQube scan. Choices: true, false'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Restore NuGet Packages
        run: nuget restore
        shell: pwsh

      - name: Build solution
        run: |
          $sln = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
          msbuild $sln.FullName /p:Configuration=Release
        shell: pwsh

      - name: List Build Outputs
        run: |
          echo "Listing files in bin/Release:"
          Get-ChildItem -Path "**/bin/Release/" -Recurse
        shell: pwsh

      - name: Create NuGet packages
        run: |
          $nuspecFiles = Get-ChildItem -Path . -Filter *.nuspec -Recurse
          New-Item -ItemType Directory -Path artifacts -Force | Out-Null
          foreach ($nuspec in $nuspecFiles) {
            Write-Host "Packing $($nuspec.FullName)..."
            nuget pack $nuspec.FullName -OutputDirectory ./artifacts
          }
        shell: pwsh

    
      - name: Upload NuGet Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: 
            ./artifacts/*.nupkg
          if-no-files-found: warn

    #   - name: Create SonarCloud Project (if not exists)
    #     run: |
    #       $headers = @{
    #         "Authorization" = "Basic $([Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("${{ secrets.SONAR_TOKEN }}:")))"
    #       }
    #       $body = @{
    #         organization = "migracao-net"
    #         project = "${{ github.event.repository.name }}"
    #         name = "${{ github.event.repository.name }}"
    #       }
    #       try {
    #         Invoke-RestMethod -Uri "https://sonarcloud.io/api/projects/create" -Method Post -Headers $headers -Body $body -ErrorAction Stop
    #         Write-Host "Projeto criado no SonarCloud."
    #       } catch {
    #         if ($_.Exception.Response.StatusCode.value__ -eq 400) {
    #           Write-Host "Projeto jÃ¡ existe no SonarCloud, seguindo..."
    #         } else {
    #           throw $_
    #         }
    #       }
    #     shell: pwsh

    #   - name: Official SonarQube Scan
    #     if: ${{ inputs.enableSonar == 'true' }}
    #     uses: SonarSource/sonarcloud-github-action@v5
    #     env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     with:
    #       args: >
    #         -Dsonar.organization=${{ github.repository_owner }}
    #         -Dsonar.projectKey=${{ github.event.repository.name }}
    #         -Dsonar.projectName=${{ github.event.repository.name }}
    #         -Dsonar.verbose=true
    #         -Dsonar.exclusions=**/bin/**/*,**/obj/**/*,**/packages/**/*,**/test/**/*

    #   - name: Run Tests
    #     continue-on-error: true
    #     run: |
    #       $testFiles = Get-ChildItem -Path "**\bin\Release" -Filter "*.Tests.dll" -Recurse | ForEach-Object { $_.FullName }
    #       if ($testFiles.Count -eq 0) {
    #         Write-Host "No test assemblies found."
    #       } else {
    #         foreach ($file in $testFiles) {
    #           & "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe" $file
    #         }
    #       }
    #     shell: pwsh



